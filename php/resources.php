<?php
/**
 * Resource class handles resource links and resource types
**/
class Resource {
    /**
     * Auto generated by mySQL and can be null at creation
    **/
    private $resourceId;
    
    /**
     * Auto generated by mySQL and can be null at creation
    **/
    private $userId;
    
    /**
     * String, the URL of the link 
    **/
    private $resourceLink;
    
    /**
     * String title of the link, video or audio 
    **/
    private $resourceTitle;
    
    /**
     * String that states how will the resource be displayed, video, audio, other website? 
    **/
    private $resourceType;
    
    /**
     *constructor for resource
     *
     *@param Int for the resource id
     *@param Int for the user id
     *@param string The URL the came from
     *@param string Title of the resource
     *@param string Type of resource to format
     *@throws UnexceptedValueException if inputs are of the incorrect types or urls
     *@throws RangesException if the inputs contain invalid values
     **/
    public function __construct($resourceId, $userId, $resourceLink, $resourceTitle, $resourceType) {
        try{
            $this ->resourceId($newResourceId);
            $this ->userId($newuserId);
            $this ->resourceLink($newResourceLink);
            $this ->resourceType($newResourceType);
            $this ->resourceId($newResourceId);
        } catch(UnexpectedValueException $unexpectedValue) {
            // rethrow to caller
            throw(UnexpectedValueException("Unable to construct resource", 0, $unexpectedValue));  
        } catch(RangeException $range) {
            // rethrow to caller
            throw(new RangeException("Unable to construct resource", 0, $range));
        }
    }
    
    /**
     * Accessor method for resource id
     *
     * @return integer value of resource id
     *
    **/
     public function getResourceId() {
        
    }
    /**
     * Mutator method for resource id
     *
     * @param mixed new value of a resource id or null if a new object
     * @throws UnexpectedValueException if input is not an integer
     * @throws a RangeException if resource id isn't positive 
    **/
    public function setResourceId($newResourceId) {
        // zeroth, allow null if this is a new object
        if($newResourceId === null) {
            $this->resourceId = null;
            return;
    }
    
    // first, trim the input
    $newResourceId = trim($newResourceId);
    
    // second, check if resource id is an integer
    if((filter_var($newResourceId, FILTER_VALIDATE_INT)) === false) {
        throw(UnexpectedValueException("resource id $newResourceId is not a number"));
    }
    
    // third, convert resource id to an integer and ensure it's positive
    $newResourceId = intval($newResourceId);
    if($resourceId<= 0) {
        throw(new RangeException("resource id $resourceId must be a positive number"));
    }
    
    // finally, the resource id is clean and can be taken out of quarantine
    $this->resourceId = $newResourceId;
}
    
    /**
     * Accessor method for user id
     *
     * @return integer value of user id
    **/
    public function getUserId() {
        
    }
    
    /**
     * Mutator method for resource id
     *
     * @param mixed value of user id or allow to be null if it's a new object
     * @throws UnexpectedValueException if user id is not an integer
     * @throws RangeException if user id isn't positive
    **/
    public function setUserId($newUserId) {
        // zeroth, allow null if this is a new object
        if($newUserId === null) {
            $this->userId = null;
            return;
        }
        
        // first, trim the input
        $newUserId = trim($userId);
        
        // second, check if the user id is an integer
        if((filter_var($newUserId, FILTER_VALIDATE_INT)) === false) {
            throw(new UnexpectedValueException("user id $newUserId is not an integer"));   
        }
        
        // third, convert user id and ensure it's positive
        $newUserId = intval($newUserId);
        if($newUserId <= 0) {
            throw(new RangeException("user id $newUserId must be a positive integer"));
        }
        
        // finally, user id is clean and can be removed from quarantine
        $this->userId = $newUserId;
    }


?>